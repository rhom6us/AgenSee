/* 
 * AgentSee API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-02-13T22:19:32Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FormData
    /// </summary>
    [DataContract]
    public partial class FormData :  IEquatable<FormData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FormData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormData" /> class.
        /// </summary>
        /// <param name="TransactionId">TransactionId (required).</param>
        /// <param name="Forms">Forms.</param>
        public FormData(string TransactionId = default(string), List<Forms> Forms = default(List<Forms>))
        {
            // to ensure "TransactionId" is required (not null)
            if (TransactionId == null)
            {
                throw new InvalidDataException("TransactionId is a required property for FormData and cannot be null");
            }
            else
            {
                this.TransactionId = TransactionId;
            }
            this.Forms = Forms;
        }
        
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Forms
        /// </summary>
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public List<Forms> Forms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormData {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormData);
        }

        /// <summary>
        /// Returns true if FormData instances are equal
        /// </summary>
        /// <param name="input">Instance of FormData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Forms == input.Forms ||
                    this.Forms != null &&
                    this.Forms.SequenceEqual(input.Forms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Forms != null)
                    hashCode = hashCode * 59 + this.Forms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
