/* 
 * AgentSee API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-02-13T22:19:32Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Forms
    /// </summary>
    [DataContract]
    public partial class Forms :  IEquatable<Forms>, IValidatableObject
    {
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum XML for value: XML
            /// </summary>
            [EnumMember(Value = "XML")]
            XML = 1,
            
            /// <summary>
            /// Enum AL3 for value: AL3
            /// </summary>
            [EnumMember(Value = "AL3")]
            AL3 = 2,
            
            /// <summary>
            /// Enum ELABEL for value: ELABEL
            /// </summary>
            [EnumMember(Value = "ELABEL")]
            ELABEL = 3,
            
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 4,
            
            /// <summary>
            /// Enum FDF for value: FDF
            /// </summary>
            [EnumMember(Value = "FDF")]
            FDF = 5
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Forms" /> class.
        /// </summary>
        /// <param name="FormNumber">Form number to process.</param>
        /// <param name="GeoCode">State code if applicable. Applicable for State specific forms.</param>
        /// <param name="Data">Form number to process.</param>
        /// <param name="S3Link">Form number to process.</param>
        /// <param name="Format">Format.</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="Base64Encoded">True indicates that we are returning Base 64 String instead of binary stream of the PDF..</param>
        public Forms(string FormNumber = default(string), string GeoCode = default(string), string Data = default(string), string S3Link = default(string), FormatEnum? Format = default(FormatEnum?), string ContentType = default(string), bool? Base64Encoded = default(bool?))
        {
            this.FormNumber = FormNumber;
            this.GeoCode = GeoCode;
            this.Data = Data;
            this.S3Link = S3Link;
            this.Format = Format;
            this.ContentType = ContentType;
            this.Base64Encoded = Base64Encoded;
        }
        
        /// <summary>
        /// Form number to process
        /// </summary>
        /// <value>Form number to process</value>
        [DataMember(Name="formNumber", EmitDefaultValue=false)]
        public string FormNumber { get; set; }

        /// <summary>
        /// State code if applicable. Applicable for State specific forms
        /// </summary>
        /// <value>State code if applicable. Applicable for State specific forms</value>
        [DataMember(Name="geoCode", EmitDefaultValue=false)]
        public string GeoCode { get; set; }

        /// <summary>
        /// Form number to process
        /// </summary>
        /// <value>Form number to process</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Form number to process
        /// </summary>
        /// <value>Form number to process</value>
        [DataMember(Name="s3Link", EmitDefaultValue=false)]
        public string S3Link { get; set; }


        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// True indicates that we are returning Base 64 String instead of binary stream of the PDF.
        /// </summary>
        /// <value>True indicates that we are returning Base 64 String instead of binary stream of the PDF.</value>
        [DataMember(Name="base64Encoded", EmitDefaultValue=false)]
        public bool? Base64Encoded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Forms {\n");
            sb.Append("  FormNumber: ").Append(FormNumber).Append("\n");
            sb.Append("  GeoCode: ").Append(GeoCode).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  S3Link: ").Append(S3Link).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Base64Encoded: ").Append(Base64Encoded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Forms);
        }

        /// <summary>
        /// Returns true if Forms instances are equal
        /// </summary>
        /// <param name="input">Instance of Forms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Forms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormNumber == input.FormNumber ||
                    (this.FormNumber != null &&
                    this.FormNumber.Equals(input.FormNumber))
                ) && 
                (
                    this.GeoCode == input.GeoCode ||
                    (this.GeoCode != null &&
                    this.GeoCode.Equals(input.GeoCode))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.S3Link == input.S3Link ||
                    (this.S3Link != null &&
                    this.S3Link.Equals(input.S3Link))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Base64Encoded == input.Base64Encoded ||
                    (this.Base64Encoded != null &&
                    this.Base64Encoded.Equals(input.Base64Encoded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormNumber != null)
                    hashCode = hashCode * 59 + this.FormNumber.GetHashCode();
                if (this.GeoCode != null)
                    hashCode = hashCode * 59 + this.GeoCode.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.S3Link != null)
                    hashCode = hashCode * 59 + this.S3Link.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Base64Encoded != null)
                    hashCode = hashCode * 59 + this.Base64Encoded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
